apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: otel
  labels:
    app: opentelemetry
spec:
  mode: statefulset
  replicas: 2
  serviceAccount: otelcontribcol
  image: otel/opentelemetry-collector-contrib:0.90.0
  targetAllocator:
    enabled: true
    prometheusCR:
      enabled: true
  ports:
    - name: prometheus
      port: 9090
      targetPort: 9090
  env:
    - name: CLUSTER_ID
      valueFrom:
        secretKeyRef:
          name: dynatrace
          key: clusterid
    - name: MY_POD_IP
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: status.podIP
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: DT_ENDPOINT
      valueFrom:
        secretKeyRef:
          name: dynatrace
          key: dynatrace_oltp_url
    - name: DT_API_TOKEN
      valueFrom:
        secretKeyRef:
          name: dynatrace
          key: dt_api_token
    - name: CLUSTERNAME
      valueFrom:
        secretKeyRef:
          name: dynatrace
          key: clustername
  config: |
    receivers:
      prometheus:
        config:
          scrape_configs:
          - job_name: opentelemetry-collector
            scrape_interval: 5s
            static_configs:
            - targets:
              - ${MY_POD_IP}:8888
          - job_name: kubernetes-pods
            kubernetes_sd_configs:
            - role: pod
            relabel_configs:
            - action: keep
              regex: true
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scrape
            - action: replace
              regex: (https?)
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scheme
              target_label: __scheme__
            - action: replace
              regex: (.+)
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_path
              target_label: __metrics_path__
            - action: replace
              regex: ([^:]+)(?::\d+)?;(\d+)
              replacement: $1:$2
              source_labels:
              - __address__
              - __meta_kubernetes_pod_annotation_prometheus_io_port
              target_label: __address__
            - action: labelmap
              regex: __meta_kubernetes_pod_label_(.+)
            - action: replace
              source_labels:
              - __meta_kubernetes_namespace
              target_label: kubernetes_namespace
            - action: replace
              source_labels:
              - __meta_kubernetes_pod_name
              target_label: kubernetes_pod_name
            - action: drop
              regex: Pending|Succeeded|Failed
              source_labels:
              - __meta_kubernetes_pod_phase
     
          
      otlp:
        protocols:
          grpc:
          http:


    processors:
    
      cumulativetodelta:
    
     
      filter:
        error_mode: ignore
        metrics:
          metric:
            - 'type == METRIC_DATA_TYPE_HISTOGRAM'
            - 'IsMatch(name, "kafka.consumer.*")'
      batch:
        send_batch_max_size: 1000
        timeout: 30s
        send_batch_size : 800
      
      transform/metrics:
        metric_statements:
          - context: metric
            statements:
            - set(resource.attributes["k8s.pod.name"],resource.attributes["pod_name"]) where  resource.attributes["pod_name"]!= nil
            - set(resource.attributes["k8s.namespace.name"], resource.attributes["container_namespace"]) where  resource.attributes["container_namespace"] != nil
            - replace_pattern(name,"^(.*)$","longer.name.$$1") where Len(name) <= 4
            - set(resource.attributes["cumulative"],"true") where aggregation_temporality == AGGREGATION_TEMPORALITY_CUMULATIVE
          - context: datapoint
            statements:
            - set(attributes["k8s.pod.name"],attributes["pod_name"]) where  attributes["pod_name"]!= nil
            - set(attributes["k8s.namespace.name"], attributes["container_namespace"]) where  attributes["container_namespace"] != nil
      k8sattributes:
        auth_type: "serviceAccount"
        passthrough: false
        filter:
           node_from_env_var: K8S_NODE_NAME
        extract:
          metadata:
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.deployment.name
            - k8s.namespace.name
            - k8s.node.name
            - k8s.pod.start_time
          # Pod labels which can be fetched via K8sattributeprocessor
          labels:
            - tag_name: key1
              key: label1
              from: pod
            - tag_name: key2
              key: label2
              from: pod
        # Pod association using resource attributes and connection
        pod_association:
          - sources:
             - from: resource_attribute
               name: k8s.pod.name
          - sources:
             - from: connection
      memory_limiter:
        check_interval: 1s
        limit_percentage: 70
        spike_limit_percentage: 30
    
      resource:
        attributes:
        - key: k8s.cluster.name 
          value: $CLUSTERNAME
          action: insert
        - key: dt.kubernetes.cluster.id
          value: $CLUSTER_ID
          action: insert
      
    
    exporters:
      logging:
        verbosity: detailed
     
      otlphttp:
        endpoint: $DT_ENDPOINT/api/v2/otlp
        headers:
          Authorization: "Api-Token $DT_API_TOKEN"
    connectors:
      routing/metrics:
          default_pipelines: [metrics/default]
          error_mode: ignore
          table:
            - statement: route() where attributes["cumulative"]=="true"
              pipelines: [metrics/conversion]
    
    
    service:
      pipelines:       
        metrics:
          receivers: [prometheus]
          processors: [memory_limiter,filter, resource,transform/metrics,k8sattributes]
          exporters: [routing/metrics]
        metrics/conversion:
         receivers: [routing/metrics]
         processors: [cumulativetodelta,batch]
         exporters: [otlphttp]
        metrics/default:
          receivers: [routing/metrics]
          processors: [batch]
          exporters: [otlphttp]
      telemetry:
        metrics:
          address: $MY_POD_IP:8888
        