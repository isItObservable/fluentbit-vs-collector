# Source: opentelemetry-demo/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: opentelemetry-demo
  labels:

    opentelemetry.io/name: opentelemetry-demo
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: opentelemetry-demo
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: opentelemetry-demo-adservice
  labels:
    opentelemetry.io/name: opentelemetry-demo-adservice
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: adservice
    app.kubernetes.io/name: opentelemetry-adservice
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
  annotations:
    kuma.io/protocol: grpc
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
      appProtocol: grpc
  selector:

    opentelemetry.io/name: opentelemetry-demo-adservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: opentelemetry-demo-cartservice
  labels:
    opentelemetry.io/name: opentelemetry-demo-cartservice
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: cartservice
    app.kubernetes.io/name: opentelemetry-cartservice
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
  annotations:
    kuma.io/protocol: grpc
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
      appProtocol: grpc
  selector:
    opentelemetry.io/name: opentelemetry-demo-cartservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: opentelemetry-demo-checkoutservice
  labels:

    opentelemetry.io/name: opentelemetry-demo-checkoutservice
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: checkoutservice
    app.kubernetes.io/name: opentelemetry-checkoutservice
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
  annotations:
    kuma.io/protocol: grpc
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
      appProtocol: grpc
  selector:

    opentelemetry.io/name: opentelemetry-demo-checkoutservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: opentelemetry-demo-currencyservice
  labels:

    opentelemetry.io/name: opentelemetry-demo-currencyservice
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: currencyservice
    app.kubernetes.io/name: opentelemetry-currencyservice
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
  annotations:
    kuma.io/protocol: grpc
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
      appProtocol: grpc
  selector:

    opentelemetry.io/name: opentelemetry-demo-currencyservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: opentelemetry-demo-emailservice
  labels:

    opentelemetry.io/name: opentelemetry-demo-emailservice
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: emailservice
    app.kubernetes.io/name: opentelemetry-emailservice
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
  annotations:
    kuma.io/protocol: http
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
      appProtocol: http
  selector:

    opentelemetry.io/name: opentelemetry-demo-emailservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: opentelemetry-demo-featureflagservice
  labels:

    opentelemetry.io/name: opentelemetry-demo-featureflagservice
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: featureflagservice
    app.kubernetes.io/name: opentelemetry-featureflag
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
  annotations:
    kuma.io/protocol: grpc
spec:
  type: ClusterIP
  ports:
    - port: 50053
      name: grpc
      targetPort: 50053
      appProtocol: grpc
    - port: 8081
      name: http
      targetPort: 8081
      appProtocol: http
  selector:
    opentelemetry.io/name: opentelemetry-demo-featureflagservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: opentelemetry-demo-ffspostgres
  labels:

    opentelemetry.io/name: opentelemetry-demo-ffspostgres
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: ffspostgres
    app.kubernetes.io/name: opentelemetry-ffspostgres
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
spec:
  type: ClusterIP
  ports:
    - port: 5432
      name: postgres
      targetPort: 5432
      appProtocol: tcp
  selector:
    opentelemetry.io/name: opentelemetry-demo-ffspostgres
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: opentelemetry-demo-frontend
  labels:

    opentelemetry.io/name: opentelemetry-demo-frontend
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: frontend
    app.kubernetes.io/name: opentelemetry-frontend
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
  annotations:
    kuma.io/protocol: http
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
      appProtocol: http
  selector:
    opentelemetry.io/name: opentelemetry-demo-frontend
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: opentelemetry-demo-frontendproxy
  labels:

    opentelemetry.io/name: opentelemetry-demo-frontendproxy
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: frontendproxy
    app.kubernetes.io/name: opentelemetry-frontendproxy
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
      appProtocol: http
  selector:

    opentelemetry.io/name: opentelemetry-demo-frontendproxy
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: opentelemetry-demo-kafka
  labels:

    opentelemetry.io/name: opentelemetry-demo-kafka
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: kafka
    app.kubernetes.io/name: opentelemetry-kafka
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
spec:
  type: ClusterIP
  ports:
    - port: 9092
      name: plaintext
      targetPort: 9092
      appProtocol: kafka
    - port: 9093
      name: controller
      targetPort: 9093
      appProtocol: kafka
  selector:
    opentelemetry.io/name: opentelemetry-demo-kafka
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: opentelemetry-demo-loadgenerator
  labels:

    opentelemetry.io/name: opentelemetry-demo-loadgenerator
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: loadgenerator
    app.kubernetes.io/name: opentelemetry-loadgenerator
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
spec:
  type: ClusterIP
  ports:
    - port: 8089
      name: tcp-service
      targetPort: 8089
  selector:
    opentelemetry.io/name: opentelemetry-demo-loadgenerator
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: opentelemetry-demo-paymentservice
  labels:

    opentelemetry.io/name: opentelemetry-demo-paymentservice
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: paymentservice
    app.kubernetes.io/name: opentelemetry-paymentservice
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
  annotations:
    kuma.io/protocol: grpc
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
      appProtocol: grpc
  selector:

    opentelemetry.io/name: opentelemetry-demo-paymentservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: opentelemetry-demo-productcatalogservice
  labels:

    opentelemetry.io/name: opentelemetry-demo-productcatalogservice
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: productcatalogservice
    app.kubernetes.io/name: opentelemetry-productcatalogservice
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
  annotations:
    kuma.io/protocol: grpc
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
      appProtocol: grpc
  selector:

    opentelemetry.io/name: opentelemetry-demo-productcatalogservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: opentelemetry-demo-quoteservice
  labels:

    opentelemetry.io/name: opentelemetry-demo-quoteservice
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: quoteservice
    app.kubernetes.io/name: opentelemetry-quoteservice
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
  annotations:
    kuma.io/protocol: http
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
      appProtocol: http
  selector:

    opentelemetry.io/name: opentelemetry-demo-quoteservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: opentelemetry-demo-recommendationservice
  labels:

    opentelemetry.io/name: opentelemetry-demo-recommendationservice
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: recommendationservice
    app.kubernetes.io/name: opentelemetry-recommendationservice
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
  annotations:
    kuma.io/protocol: grpc
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
      appProtocol: grpc
  selector:
    opentelemetry.io/name: opentelemetry-demo-recommendationservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: opentelemetry-demo-redis
  labels:

    opentelemetry.io/name: opentelemetry-demo-redis
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: redis
    app.kubernetes.io/name: opentelemetry-redis
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
spec:
  type: ClusterIP
  ports:
    - port: 6379
      name: redis
      targetPort: 6379
      appProtocol: tcp
  selector:

    opentelemetry.io/name: opentelemetry-demo-redis
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: opentelemetry-demo-shippingservice
  labels:

    opentelemetry.io/name: opentelemetry-demo-shippingservice
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: shippingservice
    app.kubernetes.io/name: opentelemetry-shippingservice
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
  annotations:
    kuma.io/protocol: grpc
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
      appProtocol: grpc
  selector:
    opentelemetry.io/name: opentelemetry-demo-shippingservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opentelemetry-demo-accountingservice
  labels:

    opentelemetry.io/name: opentelemetry-demo-accountingservice
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: accountingservice
    app.kubernetes.io/name: opentelemetry-accountingservice
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
spec:
  selector:
    matchLabels:
      opentelemetry.io/name: opentelemetry-demo-accountingservice
  template:
    metadata:
      labels:
        app.kubernetes.io/version: "1.6.0"
        opentelemetry.io/name: opentelemetry-demo-accountingservice
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/component: accountingservice
        app.kubernetes.io/part-of: opentelemetry-demo
        app.kubernetes.io/name: opentelemetry-accounting
        dt.owner: oteldemo
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        app.kubernetes.io/part-of: opentelemetry-demo
        app.kubernetes.io/name: opentelemetry-accounting
    spec:
      serviceAccountName: opentelemetry-demo
      containers:
        - name: accountingservice
          image: 'ghcr.io/open-telemetry/demo:1.6.0-accountingservice'
          imagePullPolicy: IfNotPresent
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: OTEL_K8S_POD_UID
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.uid
            - name: OTEL_COLLECTOR_NAME
              value: 'localhost'
            - name: OTEL_PROPAGATORS
              value: b3,tracecontext,baggage
            - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
              value: delta
            - name: KAFKA_SERVICE_ADDR
              value: 'opentelemetry-demo-kafka:9092'
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://$(OTEL_COLLECTOR_NAME):4317
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=opentelemetry-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 20Mi
      initContainers:
        - command:
            - sh
            - -c
            - until nc -z -v -w30 opentelemetry-demo-kafka 9092; do echo waiting
              for kafka; sleep 2; done;
          image: busybox:latest
          name: wait-for-kafka

---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opentelemetry-demo-adservice
  labels:

    opentelemetry.io/name: opentelemetry-demo-adservice
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: adservice
    app.kubernetes.io/name: opentelemetry-adservice
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
spec:
  selector:
    matchLabels:
      opentelemetry.io/name: opentelemetry-demo-adservice
  template:
    metadata:
      labels:
        app.kubernetes.io/version: "1.6.0"
        opentelemetry.io/name: opentelemetry-demo-adservice
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/component: adservice
        app.kubernetes.io/name: opentelemetry-adservice
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        app.kubernetes.io/part-of: opentelemetry-demo
        app.kubernetes.io/name: opentelemetry-adservice
        dt.owner: oteldemo
    spec:
      serviceAccountName: opentelemetry-demo
      containers:
        - name: adservice
          image: 'ghcr.io/open-telemetry/demo:1.6.0-adservice'
          imagePullPolicy: IfNotPresent
          ports:

            - containerPort: 8080
              name: service
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: OTEL_K8S_POD_UID
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.uid
            - name: OTEL_COLLECTOR_NAME
              value: 'localhost'
            - name: OTEL_PROPAGATORS
              value: b3,tracecontext,baggage
            - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
              value: delta
            - name: AD_SERVICE_PORT
              value: "8080"
            - name: FEATURE_FLAG_GRPC_SERVICE_ADDR
              value: 'opentelemetry-demo-featureflagservice:50053'
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://$(OTEL_COLLECTOR_NAME):4317
            - name: OTLP_LOGS_EXPORTER
              value: otlp
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=opentelemetry-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 300Mi

---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opentelemetry-demo-cartservice
  labels:

    opentelemetry.io/name: opentelemetry-demo-cartservice
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: cartservice
    app.kubernetes.io/name: opentelemetry-cartservice
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
spec:
  selector:
    matchLabels:

      opentelemetry.io/name: opentelemetry-demo-cartservice
  template:
    metadata:
      labels:
        app.kubernetes.io/version: "1.6.0"
        opentelemetry.io/name: opentelemetry-demo-cartservice
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/component: cartservice
        app.kubernetes.io/name: opentelemetry-cartservice
        dt.owner: oteldemo
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        app.kubernetes.io/part-of: opentelemetry-demo
        app.kubernetes.io/name: opentelemetry-cartservice
    spec:
      serviceAccountName: opentelemetry-demo

      containers:
        - name: cartservice
          image: 'ghcr.io/open-telemetry/demo:1.6.0-cartservice'
          imagePullPolicy: IfNotPresent
          ports:

            - containerPort: 8080
              name: service
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: OTEL_K8S_POD_UID
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.uid
            - name: OTEL_COLLECTOR_NAME
              value: 'localhost'
            - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
              value: delta
            - name: OTEL_PROPAGATORS
              value: b3,tracecontext,baggage
            - name: CART_SERVICE_PORT
              value: "8080"
            - name: ASPNETCORE_URLS
              value: http://*:$(CART_SERVICE_PORT)
            - name: REDIS_ADDR
              value: 'opentelemetry-demo-redis:6379'
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://$(OTEL_COLLECTOR_NAME):4317
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=opentelemetry-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 160Mi
      initContainers:
        - command:
            - sh
            - -c
            - until nc -z -v -w30 opentelemetry-demo-redis 6379; do echo waiting
              for redis; sleep 2; done;
          image: busybox:latest
          name: wait-for-redis

---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opentelemetry-demo-checkoutservice
  labels:

    opentelemetry.io/name: opentelemetry-demo-checkoutservice
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: checkoutservice
    app.kubernetes.io/name: opentelemetry-checkout
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
spec:
  selector:
    matchLabels:

      opentelemetry.io/name: opentelemetry-demo-checkoutservice
  template:
    metadata:
      labels:
        app.kubernetes.io/version: "1.6.0"
        opentelemetry.io/name: opentelemetry-demo-checkoutservice
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/component: checkoutservice
        app.kubernetes.io/name: opentelemetry-checkout
        dt.owner: oteldemo
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        app.kubernetes.io/part-of: opentelemetry-demo
        app.kubernetes.io/name: opentelemetry-demo-checkout
    spec:
      serviceAccountName: opentelemetry-demo
      containers:
        - name: checkoutservice
          image: 'ghcr.io/open-telemetry/demo:1.6.0-checkoutservice'
          imagePullPolicy: IfNotPresent
          ports:

            - containerPort: 8080
              name: service
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: OTEL_K8S_POD_UID
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.uid
            - name: OTEL_COLLECTOR_NAME
              value: 'localhost'
            - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
              value: delta
            - name: OTEL_PROPAGATORS
              value: b3,tracecontext,baggage
            - name: CHECKOUT_SERVICE_PORT
              value: "8080"
            - name: CART_SERVICE_ADDR
              value: 'opentelemetry-demo-cartservice:8080'
            - name: CURRENCY_SERVICE_ADDR
              value: 'opentelemetry-demo-currencyservice:8080'
            - name: EMAIL_SERVICE_ADDR
              value: "http://opentelemetry-demo-emailservice:8080"
            - name: PAYMENT_SERVICE_ADDR
              value: 'opentelemetry-demo-paymentservice:8080'
            - name: PRODUCT_CATALOG_SERVICE_ADDR
              value: 'opentelemetry-demo-productcatalogservice:8080'
            - name: SHIPPING_SERVICE_ADDR
              value: 'opentelemetry-demo-shippingservice:8080'
            - name: KAFKA_SERVICE_ADDR
              value: 'opentelemetry-demo-kafka:9092'
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://$(OTEL_COLLECTOR_NAME):4317
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=opentelemetry-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 20Mi
      initContainers:
        - command:
            - sh
            - -c
            - until nc -z -v -w30 opentelemetry-demo-kafka 9092; do echo waiting
              for kafka; sleep 2; done;
          image: busybox:latest
          name: wait-for-kafka
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opentelemetry-demo-currencyservice
  labels:

    opentelemetry.io/name: opentelemetry-demo-currencyservice
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: currencyservice
    app.kubernetes.io/name: opentelemetry-currency
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
spec:
  selector:
    matchLabels:

      opentelemetry.io/name: opentelemetry-demo-currencyservice
  template:
    metadata:
      labels:
        app.kubernetes.io/version: "1.6.0"
        opentelemetry.io/name: opentelemetry-demo-currencyservice
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/component: currencyservice
        app.kubernetes.io/name: opentelemetry-currency
        dt.owner: oteldemo
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        app.kubernetes.io/part-of: opentelemetry-demo
        app.kubernetes.io/name: opentelemetry-currency
    spec:
      serviceAccountName: opentelemetry-demo
      containers:
        - name: currencyservice
          image: 'ghcr.io/open-telemetry/demo:1.6.0-currencyservice'
          imagePullPolicy: IfNotPresent
          ports:

            - containerPort: 8080
              name: service
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: OTEL_K8S_POD_UID
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.uid
            - name: OTEL_COLLECTOR_NAME
              value: 'localhost'
            - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
              value: delta
            - name: CURRENCY_SERVICE_PORT
              value: "8080"
            - name: OTEL_PROPAGATORS
              value: b3,tracecontext,baggage
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://$(OTEL_COLLECTOR_NAME):4317
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=opentelemetry-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 20Mi

---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opentelemetry-demo-emailservice
  labels:

    opentelemetry.io/name: opentelemetry-demo-emailservice
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: emailservice
    app.kubernetes.io/name: opentelemetry-email
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
spec:
  selector:
    matchLabels:

      opentelemetry.io/name: opentelemetry-demo-emailservice
  template:
    metadata:
      labels:
        app.kubernetes.io/version: "1.6.0"
        opentelemetry.io/name: opentelemetry-demo-emailservice
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/component: emailservice
        app.kubernetes.io/name: opentelemetry-email
        dt.owner: oteldemo
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        app.kubernetes.io/part-of: opentelemetry-demo
        app.kubernetes.io/name: opentelemetry-email
    spec:
      serviceAccountName: opentelemetry-demo
      containers:
        - name: emailservice
          image: 'ghcr.io/open-telemetry/demo:1.6.0-emailservice'
          imagePullPolicy: IfNotPresent
          ports:

            - containerPort: 8080
              name: service
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: OTEL_K8S_POD_UID
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.uid
            - name: OTEL_COLLECTOR_NAME
              value: 'localhost'
            - name: OTEL_PROPAGATORS
              value: b3,tracecontext,baggage
            - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
              value: delta
            - name: EMAIL_SERVICE_PORT
              value: "8080"
            - name: APP_ENV
              value: production
            - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
              value: http://$(OTEL_COLLECTOR_NAME):4318/v1/traces
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=opentelemetry-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 100Mi

---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opentelemetry-demo-featureflagservice
  labels:
    opentelemetry.io/name: opentelemetry-demo-featureflagservice
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: featureflagservice
    app.kubernetes.io/name: opentelemetry-featureflag
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
spec:
  selector:
    matchLabels:
      opentelemetry.io/name: opentelemetry-demo-featureflagservice
  template:
    metadata:
      labels:
        app.kubernetes.io/version: "1.6.0"
        opentelemetry.io/name: opentelemetry-demo-featureflagservice
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/component: featureflagservice
        app.kubernetes.io/name: opentelemetry-featureflag
        dt.owner: oteldemo
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        app.kubernetes.io/part-of: opentelemetry-demo
        app.kubernetes.io/name: opentelemetry-featureflag

    spec:
      serviceAccountName: opentelemetry-demo
      containers:
        - name: featureflagservice
          image: 'ghcr.io/open-telemetry/demo:1.6.0-featureflagservice'
          imagePullPolicy: IfNotPresent
          ports:

            - containerPort: 50053
              name: grpc
            - containerPort: 8081
              name: http
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: OTEL_K8S_POD_UID
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.uid
            - name: OTEL_COLLECTOR_NAME
              value: 'localhost'
            - name: OTEL_PROPAGATORS
              value: b3,tracecontext,baggage
            - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
              value: delta
            - name: FEATURE_FLAG_SERVICE_PORT
              value: "8081"
            - name: FEATURE_FLAG_GRPC_SERVICE_PORT
              value: "50053"
            - name: DATABASE_URL
              value: ecto://ffs:ffs@opentelemetry-demo-ffspostgres:5432/ffs
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://$(OTEL_COLLECTOR_NAME):4317
            - name: OTEL_EXPORTER_OTLP_TRACES_PROTOCOL
              value: grpc
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=opentelemetry-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 175Mi
          livenessProbe:
            httpGet:
              path: /featureflags/
              port: 8081
            initialDelaySeconds: 30
            periodSeconds: 10
      initContainers:
        - command:
            - sh
            - -c
            - until nc -z -v -w30 opentelemetry-demo-ffspostgres 5432; do echo
              waiting for ffspostgres; sleep 2; done
          image: busybox:latest
          name: wait-for-ffspostgres

---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opentelemetry-demo-ffspostgres
  labels:

    opentelemetry.io/name: opentelemetry-demo-ffspostgres
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: ffspostgres
    app.kubernetes.io/name: opentelemetry-ffspostgres
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
spec:
  selector:
    matchLabels:

      opentelemetry.io/name: opentelemetry-demo-ffspostgres
  template:
    metadata:
      labels:
        app.kubernetes.io/version: "1.6.0"
        opentelemetry.io/name: opentelemetry-demo-ffspostgres
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/component: ffspostgres
        app.kubernetes.io/name: opentelemetry-ffspostgres
        dt.owner: oteldemo
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        app.kubernetes.io/part-of: opentelemetry-demo
        app.kubernetes.io/name: opentelemetry-ffspostgres
    spec:
      serviceAccountName: opentelemetry-demo
      containers:
        - name: ffspostgres
          image: 'postgres:14'
          imagePullPolicy: IfNotPresent
          ports:

            - containerPort: 5432
              name: postgres
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: OTEL_K8S_POD_UID
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.uid
            - name: OTEL_COLLECTOR_NAME
              value: 'localhost'
            - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
              value: delta
            - name: POSTGRES_DB
              value: ffs
            - name: POSTGRES_USER
              value: ffs
            - name: POSTGRES_PASSWORD
              value: ffs
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=opentelemetry-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 120Mi
          securityContext:
            runAsGroup: 999
            runAsNonRoot: true
            runAsUser: 999

---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opentelemetry-demo-frauddetectionservice
  labels:

    opentelemetry.io/name: opentelemetry-demo-frauddetectionservice
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: frauddetectionservice
    app.kubernetes.io/name: opentelemetry-fraud
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
spec:
  selector:
    matchLabels:
      opentelemetry.io/name: opentelemetry-demo-frauddetectionservice
  template:
    metadata:
      labels:
        app.kubernetes.io/version: "1.6.0"
        opentelemetry.io/name: opentelemetry-demo-frauddetectionservice
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/component: frauddetectionservice
        app.kubernetes.io/name: opentelemetry-fraud
        dt.owner: oteldemo
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        app.kubernetes.io/part-of: opentelemetry-demo
        app.kubernetes.io/name: opentelemetry-fraud
    spec:
      serviceAccountName: opentelemetry-demo
      containers:
        - name: frauddetectionservice
          image: 'ghcr.io/open-telemetry/demo:1.6.0-frauddetectionservice'
          imagePullPolicy: IfNotPresent
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: OTEL_K8S_POD_UID
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.uid
            - name: OTEL_COLLECTOR_NAME
              value: 'localhost'
            - name: OTEL_PROPAGATORS
              value: b3,tracecontext,baggage
            - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
              value: delta
            - name: KAFKA_SERVICE_ADDR
              value: 'opentelemetry-demo-kafka:9092'
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://$(OTEL_COLLECTOR_NAME):4317
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=opentelemetry-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 200Mi
      initContainers:
        - command:
            - sh
            - -c
            - until nc -z -v -w30 opentelemetry-demo-kafka 9092; do echo waiting
              for kafka; sleep 2; done;
          image: busybox:latest
          name: wait-for-kafka

---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opentelemetry-demo-frontend
  labels:

    opentelemetry.io/name: opentelemetry-demo-frontend
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: frontend
    app.kubernetes.io/name: opentelemetry-frontend
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
spec:
  selector:
    matchLabels:
      opentelemetry.io/name: opentelemetry-demo-frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/version: "1.6.0"
        opentelemetry.io/name: opentelemetry-demo-frontend
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/component: frontend
        app.kubernetes.io/part-of: opentelemetry-demo
        app.kubernetes.io/name: opentelemetry-frontend
        dt.owner: oteldemo
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        app.kubernetes.io/part-of: opentelemetry-demo
        app.kubernetes.io/name: opentelemetry-frontend
    spec:
      serviceAccountName: opentelemetry-demo
      containers:
        - name: frontend
          image: 'ghcr.io/open-telemetry/demo:1.6.0-frontend'
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
              name: service
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: OTEL_K8S_POD_UID
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.uid
            - name: OTEL_COLLECTOR_NAME
              value: 'localhost'
            - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
              value: delta
            - name: FRONTEND_PORT
              value: "8080"
            - name: OTEL_PROPAGATORS
              value: b3,tracecontext,baggage
            - name: FRONTEND_ADDR
              value: :8080
            - name: AD_SERVICE_ADDR
              value: 'opentelemetry-demo-adservice:8080'
            - name: CART_SERVICE_ADDR
              value: 'opentelemetry-demo-cartservice:8080'
            - name: CHECKOUT_SERVICE_ADDR
              value: 'opentelemetry-demo-checkoutservice:8080'
            - name: CURRENCY_SERVICE_ADDR
              value: 'opentelemetry-demo-currencyservice:8080'
            - name: PRODUCT_CATALOG_SERVICE_ADDR
              value: 'opentelemetry-demo-productcatalogservice:8080'
            - name: RECOMMENDATION_SERVICE_ADDR
              value: 'opentelemetry-demo-recommendationservice:8080'
            - name: SHIPPING_SERVICE_ADDR
              value: 'opentelemetry-demo-shippingservice:8080'
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://$(OTEL_COLLECTOR_NAME):4317
            - name: WEB_OTEL_SERVICE_NAME
              value: frontend-web
            - name: PUBLIC_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
              value: http://$(OTEL_COLLECTOR_NAME):4318/v1/traces
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=opentelemetry-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 512Mi
          securityContext:
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opentelemetry-demo-frontendproxy
  labels:

    opentelemetry.io/name: opentelemetry-demo-frontendproxy
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: frontendproxy
    app.kubernetes.io/name: opentelemetry-demo-frontendproxy
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
spec:
  selector:
    matchLabels:
      opentelemetry.io/name: opentelemetry-demo-frontendproxy
  template:
    metadata:
      labels:
        app.kubernetes.io/version: "1.6.0"
        opentelemetry.io/name: opentelemetry-demo-frontendproxy
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/component: frontendproxy
        app.kubernetes.io/part-of: opentelemetry-demo
        app.kubernetes.io/name: opentelemetry-frontproxy
        dt.owner: oteldemo
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        app.kubernetes.io/part-of: opentelemetry-demo
        app.kubernetes.io/name: opentelemetry-frontproxy
    spec:
      serviceAccountName: opentelemetry-demo
      containers:
        - name: frontendproxy
          image: 'ghcr.io/open-telemetry/demo:1.6.0-frontendproxy'
          imagePullPolicy: IfNotPresent
          ports:

            - containerPort: 8080
              name: service
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: OTEL_K8S_POD_UID
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.uid
            - name: OTEL_COLLECTOR_NAME
              value: 'localhost'
            - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
              value: delta
            - name: ENVOY_PORT
              value: "8080"
            - name: FRONTEND_PORT
              value: "8080"
            - name: OTEL_PROPAGATORS
              value: b3,tracecontext,baggage
            - name: FRONTEND_HOST
              value: 'opentelemetry-demo-frontend'
            - name: FEATURE_FLAG_SERVICE_PORT
              value: "8081"
            - name: FEATURE_FLAG_SERVICE_HOST
              value: 'opentelemetry-demo-featureflagservice'
            - name: LOCUST_WEB_PORT
              value: "8089"
            - name: LOCUST_WEB_HOST
              value: 'opentelemetry-demo-loadgenerator'
            - name: GRAFANA_SERVICE_PORT
              value: "80"
            - name: GRAFANA_SERVICE_HOST
              value: 'opentelemetry-demo-grafana'
            - name: JAEGER_SERVICE_PORT
              value: "16686"
            - name: JAEGER_SERVICE_HOST
              value: 'opentelemetry-demo-jaeger-query'
            - name: OTEL_COLLECTOR_PORT
              value: "4317"
            - name: OTEL_COLLECTOR_HOST
              value: $(OTEL_COLLECTOR_NAME)
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=opentelemetry-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 50Mi
          securityContext:
            runAsGroup: 101
            runAsNonRoot: true
            runAsUser: 101

---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opentelemetry-demo-kafka
  labels:

    opentelemetry.io/name: opentelemetry-demo-kafka
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: kafka
    app.kubernetes.io/name: opentelemetry-kafka
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
spec:
  selector:
    matchLabels:
      opentelemetry.io/name: opentelemetry-demo-kafka
  template:
    metadata:
      labels:
        app.kubernetes.io/version: "1.6.0"
        opentelemetry.io/name: opentelemetry-demo-kafka
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/component: kafka
        app.kubernetes.io/name: opentelemetry-kafka
        dt.owner: oteldemo
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        app.kubernetes.io/name: opentelemetry-kafka
        app.kubernetes.io/part-of: opentelemetry-demo
    spec:
      serviceAccountName: opentelemetry-demo
      containers:
        - name: kafka
          image: 'ghcr.io/open-telemetry/demo:1.6.0-kafka'
          imagePullPolicy: IfNotPresent
          ports:

            - containerPort: 9092
              name: plaintext
            - containerPort: 9093
              name: controller
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: OTEL_K8S_POD_UID
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.uid
            - name: OTEL_COLLECTOR_NAME
              value: 'localhost'
            - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
              value: delta
            - name: OTEL_PROPAGATORS
              value: b3,tracecontext,baggage
            - name: KAFKA_ADVERTISED_LISTENERS
              value: PLAINTEXT://opentelemetry-demo-kafka:9092
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://$(OTEL_COLLECTOR_NAME):4317
            - name: KAFKA_HEAP_OPTS
              value: -Xmx200M -Xms200M
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=opentelemetry-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 500Mi
          securityContext:
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000

---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opentelemetry-demo-loadgenerator
  labels:

    opentelemetry.io/name: opentelemetry-demo-loadgenerator
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: loadgenerator
    app.kubernetes.io/name: opentelemetry-load
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
spec:
  selector:
    matchLabels:

      opentelemetry.io/name: opentelemetry-demo-loadgenerator
  template:
    metadata:
      labels:
        app.kubernetes.io/version: "1.6.0"
        opentelemetry.io/name: opentelemetry-demo-loadgenerator
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/component: loadgenerator
        app.kubernetes.io/name: opentelemetry-load
        app.kubernetes.io/part-of: opentelemetry-demo
        dt.owner: oteldemo
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        app.kubernetes.io/name: opentelemetry-load
        app.kubernetes.io/part-of: opentelemetry-demo
    spec:
      serviceAccountName: opentelemetry-demo
      containers:
        - name: loadgenerator
          image: 'ghcr.io/open-telemetry/demo:1.6.0-loadgenerator'
          imagePullPolicy: IfNotPresent
          ports:

            - containerPort: 8089
              name: service
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: OTEL_K8S_POD_UID
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.uid
            - name: OTEL_COLLECTOR_NAME
              value: 'localhost'
            - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
              value: delta
            - name: LOCUST_WEB_PORT
              value: "8089"
            - name: LOCUST_USERS
              value: "50"
            - name: LOCUST_SPAWN_RATE
              value: "1"
            - name: LOCUST_HOST
              value: http://oteldemo.IP_TO_REPLACE.nip.io
            - name: LOCUST_HEADLESS
              value: "false"
            - name: LOCUST_AUTOSTART
              value: "true"
            - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
              value: python
            - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
              value: http://$(OTEL_COLLECTOR_NAME):4318/v1/traces
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=opentelemetry-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 120Mi

---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opentelemetry-demo-paymentservice
  labels:

    opentelemetry.io/name: opentelemetry-demo-paymentservice
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: paymentservice
    app.kubernetes.io/name: opentelemetry-payment
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
spec:
  selector:
    matchLabels:

      opentelemetry.io/name: opentelemetry-demo-paymentservice
  template:
    metadata:
      labels:
        app.kubernetes.io/version: "1.6.0"
        opentelemetry.io/name: opentelemetry-demo-paymentservice
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/component: paymentservice
        app.kubernetes.io/name: opentelemetry-payment
        app.kubernetes.io/part-of: opentelemetry-demo
        dt.owner: oteldemo
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        app.kubernetes.io/name: opentelemetry-payment
        app.kubernetes.io/part-of: opentelemetry-demo
    spec:
      serviceAccountName: opentelemetry-demo
      containers:
        - name: paymentservice
          image: 'ghcr.io/open-telemetry/demo:1.6.0-paymentservice'
          imagePullPolicy: IfNotPresent
          ports:

            - containerPort: 8080
              name: service
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: OTEL_K8S_POD_UID
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.uid
            - name: OTEL_COLLECTOR_NAME
              value: 'localhost'
            - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
              value: delta
            - name: OTEL_PROPAGATORS
              value: b3,tracecontext,baggage
            - name: PAYMENT_SERVICE_PORT
              value: "8080"
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://$(OTEL_COLLECTOR_NAME):4317
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=opentelemetry-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 120Mi
          securityContext:
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000

---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opentelemetry-demo-productcatalogservice
  labels:

    opentelemetry.io/name: opentelemetry-demo-productcatalogservice
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: productcatalogservice
    app.kubernetes.io/name: opentelemetry-product
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
spec:
  selector:
    matchLabels:

      opentelemetry.io/name: opentelemetry-demo-productcatalogservice
  template:
    metadata:
      labels:
        app.kubernetes.io/version: "1.6.0"
        opentelemetry.io/name: opentelemetry-demo-productcatalogservice
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/component: productcatalogservice
        app.kubernetes.io/name: opentelemetry-product
        app.kubernetes.io/part-of: opentelemetry-demo
        dt.owner: oteldemo
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        app.kubernetes.io/part-of: opentelemetry-demo
        app.kubernetes.io/name: opentelemetry-product
    spec:
      serviceAccountName: opentelemetry-demo
      containers:
        - name: productcatalogservice
          image: 'ghcr.io/open-telemetry/demo:1.6.0-productcatalogservice'
          imagePullPolicy: IfNotPresent
          ports:

            - containerPort: 8080
              name: service
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: OTEL_K8S_POD_UID
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.uid
            - name: OTEL_COLLECTOR_NAME
              value: 'localhost'
            - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
              value: delta
            - name: OTEL_PROPAGATORS
              value: b3,tracecontext,baggage
            - name: PRODUCT_CATALOG_SERVICE_PORT
              value: "8080"
            - name: FEATURE_FLAG_GRPC_SERVICE_ADDR
              value: 'opentelemetry-demo-featureflagservice:50053'
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://$(OTEL_COLLECTOR_NAME):4317
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=opentelemetry-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 20Mi

---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opentelemetry-demo-quoteservice
  labels:

    opentelemetry.io/name: opentelemetry-demo-quoteservice
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: quoteservice
    app.kubernetes.io/name: opentelemetry-quote
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
spec:
  selector:
    matchLabels:

      opentelemetry.io/name: opentelemetry-demo-quoteservice
  template:
    metadata:
      labels:
        app.kubernetes.io/version: "1.6.0"
        opentelemetry.io/name: opentelemetry-demo-quoteservice
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/component: quoteservice
        app.kubernetes.io/part-of: opentelemetry-demo
        app.kubernetes.io/name: opentelemetry-quote
        dt.owner: oteldemo
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        app.kubernetes.io/part-of: opentelemetry-demo
        app.kubernetes.io/name: opentelemetry-quote
    spec:
      serviceAccountName: opentelemetry-demo
      containers:
        - name: quoteservice
          image: 'ghcr.io/open-telemetry/demo:1.6.0-quoteservice'
          imagePullPolicy: IfNotPresent
          ports:

            - containerPort: 8080
              name: service
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: OTEL_K8S_POD_UID
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.uid
            - name: OTEL_COLLECTOR_NAME
              value: 'localhost'
            - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
              value: delta
            - name: OTEL_PROPAGATORS
              value: b3,tracecontext,baggage
            - name: QUOTE_SERVICE_PORT
              value: "8080"
            - name: OTEL_PHP_AUTOLOAD_ENABLED
              value: "true"
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://$(OTEL_COLLECTOR_NAME):4318
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=opentelemetry-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 40Mi
          securityContext:
            runAsGroup: 33
            runAsNonRoot: true
            runAsUser: 33

---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opentelemetry-demo-recommendationservice
  labels:

    opentelemetry.io/name: opentelemetry-demo-recommendationservice
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: recommendationservice
    app.kubernetes.io/name: opentelemetry-reco
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
spec:
  selector:
    matchLabels:

      opentelemetry.io/name: opentelemetry-demo-recommendationservice
  template:
    metadata:
      labels:
        app.kubernetes.io/version: "1.6.0"
        app.kubernetes.io/part-of: opentelemetry-demo
        opentelemetry.io/name: opentelemetry-demo-recommendationservice
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/component: recommendationservice
        app.kubernetes.io/name: opentelemetry-reco
        dt.owner: oteldemo
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        app.kubernetes.io/part-of: opentelemetry-demo
        app.kubernetes.io/name: opentelemetry-reco
    spec:
      serviceAccountName: opentelemetry-demo
      containers:
        - name: recommendationservice
          image: 'ghcr.io/open-telemetry/demo:1.6.0-recommendationservice'
          imagePullPolicy: IfNotPresent
          ports:

            - containerPort: 8080
              name: service
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: OTEL_K8S_POD_UID
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.uid
            - name: OTEL_COLLECTOR_NAME
              value: 'localhost'
            - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
              value: delta
            - name: RECOMMENDATION_SERVICE_PORT
              value: "8080"
            - name: PRODUCT_CATALOG_SERVICE_ADDR
              value: 'opentelemetry-demo-productcatalogservice:8080'
            - name: FEATURE_FLAG_GRPC_SERVICE_ADDR
              value: 'opentelemetry-demo-featureflagservice:50053'
            - name: OTEL_PYTHON_LOG_CORRELATION
              value: "true"
            - name: OTEL_PROPAGATORS
              value: b3,tracecontext,baggage
            - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
              value: python
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://$(OTEL_COLLECTOR_NAME):4317
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=opentelemetry-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 500Mi

---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opentelemetry-demo-redis
  labels:

    opentelemetry.io/name: opentelemetry-demo-redis
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: redis
    app.kubernetes.io/name: opentelemetry-redis
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
spec:
  selector:
    matchLabels:

      opentelemetry.io/name: opentelemetry-demo-redis
  template:
    metadata:
      labels:
        app.kubernetes.io/version: "1.6.0"
        app.kubernetes.io/part-of: opentelemetry-demo
        opentelemetry.io/name: opentelemetry-demo-redis
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/component: redis
        app.kubernetes.io/name: opentelemetry-redis
        dt.owner: oteldemo
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        app.kubernetes.io/part-of: opentelemetry-demo
        app.kubernetes.io/name: opentelemetry-redis
    spec:
      serviceAccountName: opentelemetry-demo
      containers:
        - name: redis
          image: 'redis:alpine'
          imagePullPolicy: IfNotPresent
          ports:

            - containerPort: 6379
              name: redis
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: OTEL_K8S_POD_UID
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.uid
            - name: OTEL_COLLECTOR_NAME
              value: 'localhost'
            - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
              value: delta
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=opentelemetry-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 20Mi
          securityContext:
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 999

---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opentelemetry-demo-shippingservice
  labels:
    opentelemetry.io/name: opentelemetry-demo-shippingservice
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/component: shippingservice
    app.kubernetes.io/name: opentelemetry-shipping
    app.kubernetes.io/version: "1.6.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    dt.owner: oteldemo
spec:
  selector:
    matchLabels:
      opentelemetry.io/name: opentelemetry-demo-shippingservice
  template:
    metadata:
      labels:
        app.kubernetes.io/version: "1.6.0"
        app.kubernetes.io/part-of: opentelemetry-demo
        opentelemetry.io/name: opentelemetry-demo-shippingservice
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/component: shippingservice
        app.kubernetes.io/name: opentelemetry-shipping
        dt.owner: oteldemo
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        app.kubernetes.io/name: opentelemetry-shipping
        app.kubernetes.io/part-of: opentelemetry-demo
    spec:
      serviceAccountName: opentelemetry-demo
      containers:
        - name: shippingservice
          image: 'ghcr.io/open-telemetry/demo:1.6.0-shippingservice'
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: service
          env:
            - name: OTEL_SERVICE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.labels['app.kubernetes.io/component']
            - name: OTEL_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: OTEL_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: OTEL_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: OTEL_K8S_POD_UID
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.uid
            - name: OTEL_COLLECTOR_NAME
              value: 'localhost'
            - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
              value: delta
            - name: SHIPPING_SERVICE_PORT
              value: "8080"
            - name: OTEL_PROPAGATORS
              value: b3,tracecontext,baggage
            - name: QUOTE_SERVICE_ADDR
              value: http://opentelemetry-demo-quoteservice:8080
            - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
              value: http://$(OTEL_COLLECTOR_NAME):4317/v1/traces
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name=$(OTEL_SERVICE_NAME),service.instance.id=$(OTEL_K8S_POD_UID),service.namespace=opentelemetry-demo,k8s.namespace.name=$(OTEL_K8S_NAMESPACE),k8s.node.name=$(OTEL_K8S_NODE_NAME),k8s.pod.name=$(OTEL_K8S_POD_NAME)
          resources:
            limits:
              memory: 20Mi

---
